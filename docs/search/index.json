[{"content":"はじめに メインブログでは久しぶりの投稿です😄 (と言いつつサブブログにアップするかも) 試しに解説したQuartoブログの執筆が非常に快適なため、いずれ全ての記事をサブブログに移行することを検討中です。\nいずれ時間ができたらQuartoとHugoで静的ブログを開設する方法についても解説記事をアップしたいと思います💡\nさて、今回は相模原市の39キャンペーン加盟店のマップをRとPythonで作成します!\n相模原市39キャンペーンとは 年に一度相模原市が開催しているキャンペーンで、15,000円以上の消費をすれば市から3,900円がキャッシュバックされるという神キャンペーン!😇 しかも家族の頭数の分だけ申請可能で、誰の買い物でもOKという、ガバガバ神仕様。😇😇\nしかし、非常に残念なことに加盟店一覧情報はpdfファイルに書かれた情報しかありません･･･　このご時世にいくらなんでもお役所仕事すぎるだろ･･･ってことで私が代わりにマップを作って差し上げることにします。\n方針 今回の方針では、①pdfファイルから表データをスクレイピング、②抽出した住所データから緯度・経度情報をGoogleMapAPIを使って取得、③GoogleMapにプロット という流れでやっていきます。\n序盤のスクレイピングですが、便利なWebツールとか、似たようなライブラリ・パッケージが山ほどありますので、正直なんでも良いです🤚今回は結果がpandas.DataFrameとして返ってくるcamelotが便利そうだったので、これを採用しました。\n自分はあんまり地図データの取り回しをやったこと無かったのですが、瓜生さんの地図データ可視化のお話を昔から見させていただいた身からすれば「これはRの守備範囲だろうな」と、あまり下調べもせずRでの実装をすることにしました。\n作り方 pdfファイルから表データをスクレイピング camelotは今回調べて初めて使いましたが、非常にシンプルなAPIで使用できる上、かなり詳細な設定もできる模様。かなりテーブル抽出に特化していますが、非常に素晴らしいライブラリだと思います🚰\nファイル書き出しの際は、一ページに存在する表がバラバラに返ってくるため、大量のファイルに分割して書き出すことになります。どうせR側でこのあとpurrr::map_dfr()でもすれば結合できるので、気にしない😉\n1import camelot 2import pandas as pd 3from pathlib import Path 4from tqdm import tqdm 5 6def extract_table(pdfpath: str): 7 # ファイル名から区名を取得する 8 ward = Path(pdfpath).name 9 10 # テーブルを抽出する 11 tables = camelot.read_pdf(pdfpath, pages=\u0026#34;all\u0026#34;) 12 13 # 書き出し 14 for index, table in enumerate(tqdm(tables)): 15 table\\ 16 .to_csv(f\u0026#34;data/{ward}_{index}.csv\u0026#34;, index=False) 17 18for p in [\u0026#34;中央区.pdf\u0026#34;, \u0026#34;南区.pdf\u0026#34;, \u0026#34;緑区.pdf\u0026#34;]: 19 extract_table(p) 抽出できたので、とりあえずファイルを読んでみます。以降の解析はRを使うことにします。\n1pacman::p_load(tidyverse) 2 3read_csv(\u0026#34;data/中央区.pdf_0.csv\u0026#34;) New names: Rows: 24 Columns: 7 ── Column specification ──────────────────────────────────────────────────────── Delimiter: \u0026quot;,\u0026quot; chr (7): ...1, 事業所（店舗等）名, 事業種別, 事業内容, 事業所所在地, 電話番号, PR・オトク情報... ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. • `` -\u0026gt; `...1` # A tibble: 24 × 7 ...1 `事業所（店舗等）名` 事業種別 事業内容 事業…¹ 電話…² PR・…³ \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; 1 相生 GOGO 飲食業 \u0026quot;お酒飲みなが… 相生3-… 080-47… \u0026lt;NA\u0026gt; 2 \u0026lt;NA\u0026gt; U-Select相模原中央 小売業 \u0026quot;自動車(中古車… 相生2-… 042-75… \u0026lt;NA\u0026gt; 3 \u0026lt;NA\u0026gt; うなぎ処いわき 飲食業 \u0026quot;飲食業\u0026quot; 相生2-… 042-75… \u0026lt;NA\u0026gt; 4 \u0026lt;NA\u0026gt; （有）菅原塗装工房 その他 \u0026quot;住宅塗装\u0026quot; 相生3-… 042-70… \u0026lt;NA\u0026gt; 5 \u0026lt;NA\u0026gt; セブンイレブン相生店 小売業 \u0026quot;コンビニエン… 相生4-… 042-75… \u0026lt;NA\u0026gt; 6 \u0026lt;NA\u0026gt; せんざん相模原店 飲食業 \u0026quot;和食、海鮮料… 相生1-1 042-77… \u0026lt;NA\u0026gt; 7 \u0026lt;NA\u0026gt; ソニック相模原 小売業 \u0026quot;家電販売、電… 相生4-… 042-75… \u0026quot;お見… 8 \u0026lt;NA\u0026gt; 蕎麦とそばまえgenten 飲食業 \u0026quot;手打ち蕎麦屋… 相生1-… 042-76… \u0026lt;NA\u0026gt; 9 \u0026lt;NA\u0026gt; パティスリーフレジェ 小売業 \u0026quot;手作りケーキ… 相生3-… 042-75… \u0026quot;手作… 10 \u0026lt;NA\u0026gt; ヘアーサロン セオ サービス業 \u0026quot;理容業 カット… 相生4-… 042-75… \u0026lt;NA\u0026gt; # … with 14 more rows, and abbreviated variable names ¹​事業所所在地, ²​電話番号, # ³​`PR・オトク情報` # ℹ Use `print(n = ...)` to see more rows ちゃんと抽出できているようです。元々のデータでは一列目が結合されたセルになっているため、完全な表にしたいのならパディングをすべきですが、まあ使わないので放っておきます。\n抽出したデータをきれいにする とりあえず、データを全部結合してみます。\n1df_joined \u0026lt;- fs::dir_ls(\u0026#34;data\u0026#34;) |\u0026gt; 2 suppressMessages( 3 map_dfr(function(x) { 4 read_csv(x, show_col_types = FALSE) %\u0026gt;% 5 select(2:ncol(.)) 6 }) 7 ) 8df_joined |\u0026gt; 9 head() data/中央区.pdf_0.csv data/中央区.pdf_1.csv data/中央区.pdf_10.csv data/中央区.pdf_11.csv data/中央区.pdf_12.csv data/中央区.pdf_13.csv 結合は問題なくできています。事業社所在地の住所をGoogleGeometryAPIに投げれば緯度と経度が出せそうですが、できるなら「神奈川県相模原市??区」もついていた方が正確な検索結果を得られそうです。\n適当にこれをコーディングしてみます。今回はファイル名から区名を取り出しつつ、結合してみます。\n1df_joined \u0026lt;- fs::dir_ls(\u0026#34;data\u0026#34;) |\u0026gt; 2 map_dfr(function(x) { 3 # \u0026#34;緑区.pdf_0.csv\u0026#34;から\u0026#34;緑区\u0026#34;を取り出す 4 wald_name = fs::path_file(x) |\u0026gt; 5 str_split(\u0026#34;\\\\.\u0026#34;) |\u0026gt; 6 pluck(1) |\u0026gt; 7 pluck(1) 8 9 read_csv(x, show_col_types = FALSE, col_names = FALSE) |\u0026gt; 10 magrittr::set_colnames(c(\u0026#34;area\u0026#34;, \u0026#34;事業所名\u0026#34;, \u0026#34;事業種別\u0026#34;, \u0026#34;事業内容\u0026#34;, \u0026#34;事業所所在地\u0026#34;, \u0026#34;電話番号\u0026#34;, \u0026#34;PR\u0026#34;)) %\u0026gt;% 11 select(2:ncol(.)) |\u0026gt; 12 mutate(adress = glue::glue(\u0026#34;神奈川県相模原市{wald_name}{事業所所在地}\u0026#34;)) 13 }) プレビューしてみる。\n1df_joined |\u0026gt; head() # A tibble: 6 × 7 事業所名 事業種別 事業内容 事業所…¹ 電話…² PR adress \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;glue\u0026gt; 1 事業所（店舗等）名 事業種別 \u0026quot;事業内容\u0026quot; 事業所… 電話番… PR・… 神奈… 2 GOGO 飲食業 \u0026quot;お酒飲みながら色… 相生3-4… 080-47… \u0026lt;NA\u0026gt; 神奈… 3 U-Select相模原中央 小売業 \u0026quot;自動車(中古車)の… 相生2-1… 042-75… \u0026lt;NA\u0026gt; 神奈… 4 うなぎ処いわき 飲食業 \u0026quot;飲食業\u0026quot; 相生2-1… 042-75… \u0026lt;NA\u0026gt; 神奈… 5 （有）菅原塗装工房 その他 \u0026quot;住宅塗装\u0026quot; 相生3-1… 042-70… \u0026lt;NA\u0026gt; 神奈… 6 セブンイレブン相生店 小売業 \u0026quot;コンビニエンスス… 相生4-1… 042-75… \u0026lt;NA\u0026gt; 神奈… # … with abbreviated variable names ¹​事業所所在地, ²​電話番号 途切れているので住所だけを抽出。\n1df_joined |\u0026gt; select(adress) # A tibble: 2,021 × 1 adress \u0026lt;glue\u0026gt; 1 神奈川県相模原市中央区事業所所在地 2 神奈川県相模原市中央区相生3-4-20 3 神奈川県相模原市中央区相生2-1-1 4 神奈川県相模原市中央区相生2-16-6 5 神奈川県相模原市中央区相生3-13-10-1F-1 6 神奈川県相模原市中央区相生4-1-15 7 神奈川県相模原市中央区相生1-1 8 神奈川県相模原市中央区相生4-11-15 9 神奈川県相模原市中央区相生1-1-18　1F 10 神奈川県相模原市中央区相生3-14-14 # … with 2,011 more rows # ℹ Use `print(n = ...)` to see more rows よさそうです👌\nGoogleGeocodingAPIを使って住所から緯度・経度を出す ℹ️Info\nGoogleGeocodingAPIは従量課金の有料サービスです。1,000クエリで5.00USDとのことですので、今回のケースを有料でAPI叩いた場合約10USDくらい必要になります。 私は今回90日限定のフリー体験の範囲内で試しました。また、新規登録時に無料クレジットが300USDもらえたので、当分お金の心配はいらないのかなと思います。\n使い方はGoogle cloudでアカウントを作成し、コンソールに行き、プロジェクトを新規作成、プロジェクトを開いてライブラリに飛ぶとGoogle geocoding APIが有効化できます。APIキーは認証情報から確認できます。\n最初はgeocoding.jpを使う以下のようなコードを書きましたが、10秒に1回のクエリに制限する必要があったため、GoogleのAPIを使うことにしました。\n1pacman::p_load(rvest) 2 3get_position \u0026lt;- function(adress) { 4 url \u0026lt;- paste0(\u0026#34;https://www.geocoding.jp/api/?v=1.1\u0026amp;q=\u0026#34;, adress) 5 6 lat \u0026lt;- read_html(url) |\u0026gt; 7 html_nodes(\u0026#34;lat\u0026#34;) |\u0026gt; 8 html_text() 9 lng \u0026lt;- read_html(url) |\u0026gt; 10 html_nodes(\u0026#34;lat\u0026#34;) |\u0026gt; 11 html_text() 12 lat \u0026lt;- if_else(is.na(lat), \u0026#34;0\u0026#34;, lat) 13 lng \u0026lt;- if_else(is.na(lng), \u0026#34;0\u0026#34;, lng) 14 # wait 15 Sys.sleep(10) 16 return(tibble(lat = lat, lng = lng)) 17} 18 19get_position_vec \u0026lt;- function(adress_vec) { 20 adress_vec |\u0026gt; 21 map_dfr(\\(vec) get_position(vec)) 22} で、以下が本題。\n1library(ggmap) Google's Terms of Service: https://cloud.google.com/maps-platform/terms/. Please cite ggmap if you use it! See citation(\u0026quot;ggmap\u0026quot;) for details. Google cloud platformからAPIキーを取得します。とりあえず今回はgeocoding APIだけ取得すればOKです。\nここにAPIキーをハードコードするわけにはいかないので別ファイルから読み込んでますが、register_google(key = ******)に直接入力して問題ありません👍\n1# APIキーはGCPから取得したもの 2key \u0026lt;- readChar(\u0026#34;API.key\u0026#34;, file.info(\u0026#34;API.key\u0026#34;)$size) 3register_google(key = key) ggmapパッケージはmutate_geocode()関数でお手軽に住所検索ができます。\n1df_geo \u0026lt;- df_joined |\u0026gt; 2 mutate_geocode(adress) 3df_geo |\u0026gt; 4 write_csv(\u0026#34;sagamihara_geodata.csv\u0026#34;) 計算が無駄にならないように書き出しておいて・・・。\nできあがったファイルをみると、lonとlatという列が追加されています!　これが経度緯度のようです。 ここまで来ればあとはGooglemapに書き出すだけ😉\nRでGoogleMapにピンを立てる方法はちょっと分からなかったので、GoogleMapにオリジナルマップを作成する戦法をとりました。\nGoogleMapにピンたてる Googleのマイマップにいきます。\nここで新しい地図の作成⇒レイヤのインポートを選択し、先ほど出力したファイルを食わせます。\nするとマーカーのタイトルを選ぶよう言われるので、とりあえず事業所名にでも設定しておきます。 こうしてできたのが以下です!\nマイマップの埋め込みリンクを取得して貼り付ければ、こんな感じでブログに載せられるので便利ですね。\nまとめ 今回は以下の作業をプログラミングでやってみました。\npdf内にしかない住所情報を取得 GoogleGeocodingAPIを使って住所から座標を取得 Googleマップと組み合わせると地図データは色々遊べそうで、面白いですね😄\n相模原市にお住まいの方は、サンキューキャンペーンがあと一ヶ月あまりです!頑張って15,000円使いましょう!!\n","date":"2022-10-26T00:00:00Z","permalink":"https://snitch0.github.io/p/sagamihara-39-map/","title":"pdfファイルの住所情報を抽出してGoogleMapに表示させる"},{"content":"prep 1pacman::p_load(tidyverse) (1) 二項分布の確率はdbinom()関数で生成できる。\n1x \u0026lt;- seq(1:6) 2df_1 \u0026lt;- tibble( 3 x = x, 4 y = dbinom(x, size = 6, prob = 0.25) 5) 6df_1 |\u0026gt; 7 ggplot(aes(x, y)) + 8 geom_point() + 9 geom_line() 平均値と標準偏差を確率分布から求める。\n標準偏差を求める関数を作っておく。\n1glue::glue(\u0026#34;mean is {sum(df_1$x * df_1$y)}\u0026#34;) mean is 1.5 1val_mean \u0026lt;- sum(df_1$x * df_1$y) 2val_var \u0026lt;- sum((df_1$x)^2 * df_1$y) - val_mean^2 3 4glue::glue(\u0026#34;variance is {val_var}\u0026#34;) variance is 1.125 二項分布の平均値、分散がそれぞれであることを利用した計算結果と一致する。\n1glue::glue(\u0026#34;np = {6 * 0.25}\u0026#34;) np = 1.5 1glue::glue(\u0026#34;npq = {6 * 0.25 * 0.75}\u0026#34;) npq = 1.125 (2) nとpが与えられた時の二項分布の平均と分散を求める関数を作成してみる。\n1calc_binomial \u0026lt;- function(n, p) { 2 x = seq(1, n, 1) 3 y = dbinom(x, n, p) 4 val_mean = sum(x * y) 5 val_var = sum(x * x * y) - val_mean ^ 2 6 7 tibble(x = x, y = y) |\u0026gt; 8 ggplot(aes(x, y)) + 9 geom_line() + 10 geom_point() + 11 geom_segment(aes(x = val_mean, xend = val_mean, 12 y = 0, yend = dbinom(val_mean, n, p))) + 13 theme_bw() + 14 ggtitle(glue::glue(\u0026#34;n = {n}, p = {p}\u0026#34;)) + 15annotate(\u0026#34;text\u0026#34;, 16 x = val_mean + 10, y = max(y), 17 label = glue::glue(\u0026#34;Mean = {val_mean}, Variance = {val_var}\u0026#34;)) 18} 1calc_binomial(50, 0.5) 1calc_binomial(100, 0.2) 1calc_binomial(400, 0.2) 1calc_binomial(900, 1/3) (3) 正確な硬貨を8回投げた時の表の出る回数は二項分布に従う。\n1calc_binomial(8, 0.5) + 2xlim(c(0, 20)) (4) 二項分布の式、とは以下である。\n(a) $$ $$\n(b) 「たかだか２回」が解釈不能なので飛ばす。\n(c) $$ $$\n(d) 正確な硬貨を9回投げるとき、たかだか3回表が出る確率ってほんとなんなんだろう。3回以下なのか。\n5) 普通に二項分布として計算する。\nたかだかは例によってよく分からないので飛ばす。\n$$ $$\n6) たかだか問題によりパス。\n7) 11 - (( 3 / 4 ) ^ 10 + 10 * 3 ^ 9 / 4 ^ 10 + 45 * 3 ^ 8 / 4 ^ 10) [1] 0.4744072 0, 1, 2回生じる確率を二項分布の式から計算し、余事象の確率を計算する。\n0.4744\n8) 不良がの確率で存在する二項分布を考える。\n1(898 / 1000)^10 [1] 0.3410071 110 * (102 / 1000) * (898 / 1000) ^ 9 [1] 0.3873354 145 * (102 / 1000) ^ 2 * (898 / 1000) ^ 8 [1] 0.197981 9) (a) 1prod(7:10) / prod(1:4) * 2 ^6 / 3 ^ 10 [1] 0.2276076 (b) 1prod(c(8, 9, 10)) / prod(1:3) * 8 / 3 ^ 10 + 9 * 10 / 2 * 4 / 3 ^ 10 + 10 / 3 ^ 10 [1] 0.01947535 10) 198 ^ 9 * 2 / 100 ^ 10 [1] 0.01667496 19 * 8 / 2 * 98 ^ 7 * 2 ^ 3 / 100 ^ 10 [1] 0.0002500202 11) ポワソン分布の式は以下。\nの時のを求めれば良い。\n1exp(-0.1) [1] 0.9048374 これを二項分布で計算すると、\n1(0.98) ^ 5 [1] 0.9039208 となり、おおよそ近い。\n12) 超幾何分布で考える。今気づいたけど、choose()関数でコンビネーション計算できるみたい。\n1choose(60, 2) * choose(30, 2) / choose(90, 4) [1] 0.3013279 二項分布ならば以下。\n1choose(4, 2) * (2 / 3) ^ 2 * (1 / 3) ^ 2 [1] 0.2962963 近からず遠からず。Nが少々少なかったか。\n13) 1m = 100 * 0.02 2x = 4 3m ^ x * exp(-m) / factorial(x) [1] 0.09022352 14) 1m = 200 * 0.03 2x = 5 3m ^ x * exp(-m) / factorial(x) [1] 0.1606231 15) 動物園の入場者数は4人と比べたら相当多いはず。そのため、ポアソン分布が使えると考える。\nポワソン分布の期待値はであり、それが4なのだから、確率の計算が可能。\n期待値の性質を使うというアイデアは一瞬分からなかったけど、とても便利な性質だなあ。\n1m = 4 2x = c(1, 2, 5) 3m ^ x * exp(-m) / factorial(x) [1] 0.07326256 0.14652511 0.15629345 16) 1p = 1 / 10000 2n = 20000 3m = n * p 4 5m [1] 2 17) 1n = 200 2p = 0.02 3 44 ^ 2 * exp(-4) / factorial(2) [1] 0.1465251 18) 1p = 0.012 2n = 300 3 43.6 ^ 2 * exp(-3.6) / factorial(2) [1] 0.1770577 19) 一冊の本で、一ページあたりの誤植数の期待値が0.05であるポアソン分布を考える。\n1x = c(0, 1, 2) 20.05 ^ x * exp(-0.05) / factorial(x) [1] 0.951229425 0.047561471 0.001189037 20) 14 ^ 1 * exp(-4) / factorial(1) [1] 0.07326256 例のごとく、たかだか問題は飛ばす。\n21) m = 5と指定されたポアソン分布。\n(a) 今更だけど、ポワソン分布の関数を作ろう。\n1poisson_func \u0026lt;- function(m, x) { 2 m ^ x * exp(-m) / factorial(x) 3} 1poisson_func(5, 0) [1] 0.006737947 (b) 1poisson_func(5, 2) [1] 0.08422434 (c) 1poisson_func(5, 5) [1] 0.1754674 22) 11 - sum(poisson_func(4, c(0:5))) [1] 0.2148696 11 - sum(poisson_func(4, c(0:1))) [1] 0.9084218 ところで、これは確率密度関数がプロットしたらイメージわきやすい気がした。\n1library(tidyverse) 2 3tibble( 4 x = 1:20, 5 p = poisson_func(4, 1:20) 6) |\u0026gt; 7 ggplot(aes(x = x, y = p)) + 8 geom_point() + 9 geom_line() 23) (a) 確率は単純にポワソン分布の式に代入すればよい。\n1poisson_func(3, c(1:10)) [1] 0.1493612051 0.2240418077 0.2240418077 0.1680313557 0.1008188134 [6] 0.0504094067 0.0216040315 0.0081015118 0.0027005039 0.0008101512 平均値、すなわち期待値は確率に確率変数を乗算してから合計を計算すればよい。\n1sum(poisson_func(3, 1:10) * 1:10) [1] 2.996693 確かに3に近い値となった。\n多分手計算の都合で10までとしているのだが、とても大きい値まで計算するとどうか。\n1sum(poisson_func(3, 1:100) * 1:100) [1] 3 これ以上はオーバーフローしてしまうようだ。\n(b) 分散は二乗の期待値引く期待値の二乗で求める。\n1sum(poisson_func(3, 1:10) * (1:10)^2) - sum(poisson_func(3, 1:10) * 1:10)^2 [1] 2.982299 これも大体3に近い。\n同じように大きい数字まで計算してみる。\n1sum(poisson_func(3, 1:100) * (1:10)^2) - sum(poisson_func(3, 1:100) * 1:100)^2 [1] 2.963084 うーん　これが計算の限界か。コンピュータ上だと桁数の多い小数が計算できないというのは本当だったのか。\n24) 正規分布の確率密度関数でも、自作関数を作ってみよう。\n1normal_function \u0026lt;- function(z) { 2 exp(-z ^ 2 / 2) / sqrt(2 * pi) 3} 一応プロットして確認する。\n1tibble( 2 x = -1000:1000*0.01, 3 p = normal_function(-1000:1000*0.01) 4 ) |\u0026gt; 5 ggplot(aes(x = x, y = p)) + 6 geom_point() + 7 geom_line() ちゃんと標準正規分布になっているようだ。いったんデータフレームにいれておく。\n積分値が欲しいが、この積分値を求めるのは結構しんどい。マクローリン展開しないといけない?\nと、調べてみるとRの標準関数でやる補法があるらしい。正規分布の密度(density)をintegral関数に与える。integral関数なんて・・・Rを五年以上やってて初めて聞いた・・・\n(a) 1integrate(dnorm, -1, 1) 0.6826895 with absolute error \u0026lt; 7.6e-15 わーほんとに求まったすごい。\n(b)\u0026hellip;(f) 1calc_normal_sum \u0026lt;- function(z) {integrate(dnorm, -z, z)} 1c(2, 3, 1.96, 2.33, 2.58) |\u0026gt; 2 map(\\(x) calc_normal_sum(x)) [[1]] 0.9544997 with absolute error \u0026lt; 1.8e-11 [[2]] 0.9973002 with absolute error \u0026lt; 9.3e-07 [[3]] 0.9500042 with absolute error \u0026lt; 1e-11 [[4]] 0.9801938 with absolute error \u0026lt; 1.2e-09 [[5]] 0.99012 with absolute error \u0026lt; 1.9e-08 25) 確率密度関数の積分値から確率を求める問題。\nRではqnorm()がそれを実現してくれる。\n1qnorm(0.95, 0, 1) [1] 1.644854 ここで、0.95とは以下の部分の面積である。\n1tibble( 2 x = -1000:1000*0.01, 3 p = normal_function(-1000:1000*0.01) 4 ) -\u0026gt; df_norm 5 6df_norm |\u0026gt; 7 ggplot(aes(x = x, y = p)) + 8 geom_line() + 9 geom_area( 10 data = df_norm |\u0026gt; filter(x \u0026lt; 1.644854), 11 aes(x = x, y = p) 12 ) この点に注意して計算する。\n(a) 1qnorm(0.45 + 0.5, 0, 1) [1] 1.644854 (b) 1qnorm(0.96, 0, 1) [1] 1.750686 (c) 1qnorm(0.07, 0, 1) [1] -1.475791 (d) 1qnorm(0.65, 0, 1) [1] 0.3853205 (e) 1qnorm(0.03, 0, 1) [1] -1.880794 (f) 1qnorm(0.3 + 0.5, 0, 1) [1] 0.8416212 26) (a) integrate()関数を使えば確率密度関数の面積値を求めることが出来るが、標準正規分布でない場合は自作関数でwrapする必要があるのではないだろうか。\n1dnorm_mod \u0026lt;- function(x) {dnorm(x = x, mean = 10, sd = 2)} 2integrate(dnorm_mod, -Inf, 13) 0.9331928 with absolute error \u0026lt; 1.5e-05 (b) 1integrate(dnorm_mod, 6, Inf) 0.9772499 with absolute error \u0026lt; 1.1e-07 (c) 1integrate(dnorm_mod, 6, 13) 0.9104427 with absolute error \u0026lt; 1.3e-13 27) 1dnorm_mod \u0026lt;- function(x) {dnorm(x = x, mean = 57.4, sd = 8.4)} 1integrate(dnorm_mod, -Inf, 70) 0.9331928 with absolute error \u0026lt; 1.5e-05 1integrate(dnorm_mod, -Inf, 51.1) 0.2266274 with absolute error \u0026lt; 9e-05 1integrate(dnorm_mod, 59.5, 76.3) 0.3890692 with absolute error \u0026lt; 4.3e-15 1integrate(dnorm_mod, 44.8, 74.2) 0.9104427 with absolute error \u0026lt; 1.3e-13 1integrate(dnorm_mod, 72.1, Inf) 0.04005916 with absolute error \u0026lt; 5.9e-07 1integrate(dnorm_mod, 49, Inf) 0.8413447 with absolute error \u0026lt; 0.00011 28) 1dnorm_mod \u0026lt;- function(x) {dnorm(x = x, mean = 71.8, sd = 5.6)} 11 - integrate(dnorm_mod, 78.8, Inf)[[1]] [1] 0.8943502 11 - integrate(dnorm_mod, -Inf, 60.6)[[1]] [1] 0.9772499 1integrate(dnorm_mod, 74.6, 80.2) 0.2417303 with absolute error \u0026lt; 2.7e-15 1integrate(dnorm_mod, 63.4, 80.2) 0.8663856 with absolute error \u0026lt; 9.6e-15 29) 1dnorm_mod \u0026lt;- function(x) {dnorm(x = x, mean = 520, sd = 10)} 1integrate(dnorm_mod, -Inf, 500) 0.02275013 with absolute error \u0026lt; 4.6e-05 30) 確率と平均値から正規分布の標準偏差を求める問題。\n参考ページと同じように解く。\nこの問題はRプログラミングで解くのは難しい。(多分)\n正規化する。\n標準正規分布表より、面積値が(0.5 - 0.2 = 0.3)となるようなところを探すとなので、\n31) 先ほどと似たような形で、を考える。\n1.28は確率面積値が0.4となる値を正規分布表から求めたもの。\n平均値は92.98となる。\n32) 1dnorm_mod \u0026lt;- function(x) {dnorm(x, 60.5, 7.4)} 2integrate(dnorm_mod, 70, Inf)[[1]] * 100 [1] 9.960881 1integrate(dnorm_mod, -Inf, 48)[[1]] * 100 [1] 4.559159 1integrate(dnorm_mod, 56, 64)[[1]] * 100 [1] 41.03259 33) 正規分布において、面積値が0.9となる確率変数よりも多くの在庫を確保しておけばよい、と考える。\n1qnorm(0.9, 250, 30) [1] 288.4465 289以上の在庫があればよい。\n34) 1qnorm(0.95, 340, 26) [1] 382.7662 383個用意しておけばよい。\n35) (a) 1integrate(\\(x) dnorm(x, 300, 35), 320, Inf) 0.2838546 with absolute error \u0026lt; 2.5e-05 28.4%\n(b) 1integrate(\\(x) dnorm(x, 300, 35), 250, 350) 0.8468725 with absolute error \u0026lt; 9.4e-15 84.7%\n(c) 1qnorm(0.75, 300, 35) [1] 323.6071 323.6時間\n36) (a) 1integrate(\\(x) dnorm(x, 72.8, 15), 88, Inf) 0.1554505 with absolute error \u0026lt; 2.2e-06 (b) 11 - integrate(\\(x) dnorm(x, 72.8, 15), 32, Inf)[[1]] [1] 0.003264096 (c) 1qnorm(0.88, 72.8, 15) [1] 90.4248 (d) 1qnorm(0.25, 72.8, 15) [1] 62.68265 37) イメージするために、正規分布を図示してみる。\n1library(tidyverse) 2 3tibble(x = 1:2000 * 0.1) |\u0026gt; 4 mutate( 5 dist_a = dnorm(x, 75, 15), 6 dist_b = dnorm(x, 100, 10) 7 ) |\u0026gt; 8 pivot_longer(-1) |\u0026gt; 9 ggplot(aes(x = x, y = value, col = name)) + 10 geom_line() とは言っても、問題文をよく読むと二つの分布の関係性を気にする必要性は特になかった。\n1integrate(\\(x) dnorm(x, 75, 15), 100, Inf) 0.04779035 with absolute error \u0026lt; 7.9e-05 1integrate(\\(x) dnorm(x, 100, 10), -Inf, 75) 0.006209665 with absolute error \u0026lt; 2.3e-05 38) 12400 * integrate(\\(x) dnorm(x, 112, 12), 105, 125)[[1]] [1] 1394.005 回答と計算が少し違うが、おそらく正規分布表を使った事による誤差と思われる。\n39) 正規分布の平均・分散が以下で求められることを利用する。\n計算すると平均が80, 分散が8と分かる。\n1integrate(\\(x) dnorm(x, 80, 8), 0.18 * 400, Inf) 0.8413447 with absolute error \u0026lt; 8.3e-05 40) 1choose(14, 4) * (1 / 2) ^ 4 * (1 / 2) ^ 10 [1] 0.06109619 1mu = 14 * (1 / 2) 2sigma = sqrt(mu * (1 / 2)) 3 4dnorm(4, mu, sigma) [1] 0.05895185 41) 1mu = 60 2sigma = sqrt(mu * (1 - 0.6)) 3 4integrate(\\(x) dnorm(x, mu, sigma), -Inf, 50) 0.02061341 with absolute error \u0026lt; 7.6e-05 42) 1integrate(\\(x) dnorm(x, 1000 / 6, sqrt(1000 / 6 * 5 / 6)), 180, Inf) 0.1289495 with absolute error \u0026lt; 3.3e-09 1integrate(\\(x) dnorm(x, 1000 / 6, sqrt(1000 / 6 * 5 / 6)), 140, 200) 0.9858353 with absolute error \u0026lt; 2.9e-09 1# integrate(\\(x) dbinom(x, 1000, 1 / 6), 140, 200) dbinomはintegerしか引数にとれないらしい。integrateの計算がうまくいかなかった。\n43) やーっと練習問題も最後のページにたどり着いた。\n1integrate(\\(x) dnorm(x, 0.36 * 400, sqrt(0.36 * 400 * (1 - 0.36))), 125, 400) 0.9761014 with absolute error \u0026lt; 3.3e-05 44) 1integrate(\\(x) dnorm(x, 800*0.02, sqrt(800*0.02*0.98)), 20, Inf) 0.1562111 with absolute error \u0026lt; 4.7e-05 45) 1integrate(\\(x) dnorm(x, 0.4 * 400, sqrt(400*0.4*0.6)), 180, Inf) 0.02061341 with absolute error \u0026lt; 7.7e-05 46) 1integrate(\\(x) dnorm(x, 1000*0.1, sqrt(1000*0.1*0.9)), -Inf, 80) 0.01750749 with absolute error \u0026lt; 9.1e-05 47) 割愛(ネットにいくらでも解説落ちてるので)\n48) 割愛(ネットにいくらでも解説落ちてるので)\n49) 割愛(ネットにいくらでも解説落ちてるので)\n長かった。\n所感 実際的な問題文が多かったので、正規分布を実際の出来事にあてはめるとどうなるか、というイメージを身体で覚えた感じがする。\nにしても問題多かった・・。\n","date":"2022-10-23T00:00:00Z","permalink":"https://snitch0.github.io/p/basic-statistics-6/","title":"宮川公男「基礎統計学」第五版 第六章主な確率分布 練習問題の解法"},{"content":"完成形 info, warning, danger, normalを用意。\n1{{% hint info %}} 2Info box. 3{{% /hint %}} 4 5{{% hint warning %}} 6Warning box. 7{{% /hint %}} 8 9{{% hint danger %}} 10Danger box. 11{{% /hint %}} 12 13{{% hint normal %}} 14Normal box. 15{{% /hint %}} Info box.P\nWarning box.\nDanger box.\nNormal box.\n作り方 全面的にNelis Oostens氏のコードをThe Unilicenseのもとで利用させていただいています。\nlayouts/shortcodes/hint.html Hugoのショートコードではどのテーマを利用しているかに関わらず、layouts/shortcodesがショートコードの定義ファイルの置き場であり、ファイル名(この場合はhint)がショートコード名になります。\nhint.html 1{{ $type := .Get 0 }} 2{{ printf \u0026#34;\u0026lt;blockquote class=\\\u0026#34;md-hint %s\\\u0026#34;\u0026gt;\u0026#34; $type | htmlUnescape | safeHTML }} 3{{ .Inner | safeHTML }} 4{{ printf \u0026#34;\u0026lt;/blockquote\u0026gt;\u0026#34; | htmlUnescape | safeHTML }} theme/**/assets/scss/custom.scss scssにてcssを定義します。記述すべき場所はテーマによって違うと思います。 私が使用しているStack themeではtheme/hugo-theme-stack/assets/scss/custom.scssです。\n冒頭紹介した参考記事では、カラーコードをどこかの変数から取ってきているようですが、参照すべきその変数が記事内には書かれていなかったのでハードコードしました。 Windows PowerToysのカラーピッカーを使用してちまちまとカラーピック。\ncustom.scss 1.md-hint { 2 \u0026amp;.info { 3 border-left-color: rgba(102, 187, 255, 1); 4 background-color: rgba(102, 187, 255, 0.25); 5 } 6 7 \u0026amp;.warning { 8 border-left-color: rgba(255, 221, 102, 1); 9 background-color: rgba(255, 221, 102, 0.25); 10 } 11 12 \u0026amp;.danger { 13 border-left-color: rgba(255, 102, 102, 1); 14 background-color: rgba(255, 102, 102, 0.25); 15 } 16 17 \u0026amp;.normal { 18 border-left-color: rgba(91, 93, 94, 1); 19 background-color: rgba(91, 93, 94, 0.05); 20 } 21} あとは使うだけ! 以下のようにして使います。\n1{{% hint info %}} 2Info box. 3{{% /hint %}} HugoではGo言語がバックエンドなので、ショートコードの作り方はややGoっぽい特殊な書き方です。 ただまあ･･･PHPよりは簡単なのかな。\n","date":"2022-10-14T00:00:00Z","permalink":"https://snitch0.github.io/p/creating-hugo-shortcode/","title":"Hugoのショートコードを作る"},{"content":"この記事について しばらく前に会社の計算サーバーでVSCode×conda×rmd/qmdの環境を試行錯誤して構築することができた。\n作っただけで満足してしまってその後はjupyter notebookしか使わないという暴挙にでてしまっていたが、これからはquarto活用を推進していこうという気になったので、改めて環境を見直した。\nこの記事を読んでできるようになること VSCode-R(REditorSupport)を介してrmd/qmdのチャンクをインタラクティブモードで実行する際、指定したconda環境を使うようになります。 また、ターミナルにはradianが使用されるようになります。 誰向けか Rのバージョンを使い分けたい人 Rのバージョン管理にcondaを使っている人 わけあってRのアップデートを気軽にはできない場合1 方法 クレジット 最初に、この解決法を知るに至った、神的なGitHub issueをクレジットしておきたい。\n自分はこちらのイシュー(Rとradianをconda環境指定しつつvscode-Rで使うにはどうしたら良いか)についていたelsherbiniさんのスクリプトで成功した。\n最小構成のconda環境 まず環境を作る。これさえあればとりあえずはvscodeでの解析環境が作れる。\n1mamba create -n r42 \u0026#34;r-base==4.2\u0026#34; 2# 完了後 3mamba activate r42 4mamba install radian radianを使う気が無いなら省略してもOK。\nもしjupyter Notebook環境も作りたいなら、以下のものも用意しておく。\n1mamba install r-irkernel jupyterlab conda-forgeレポジトリにはRパッケージも存在しており、コマンドライン上でパッケージをインストールすることは可能だ。\nしかし、この後インストールが必須なlanguageserverをcondaでインストールしてしまうと、依存関係の設定ミスにより強制的にR4.1にダウングレードされてしまうので注意が必要だ。 基本的にRのパッケージはR内でインストールする方が良さそうだ。\n1radian 1R version 4.2.1 (2022-06-23) -- \u0026#34;Funny-Looking Kid\u0026#34; 2Platform: x86_64-pc-linux-gnu (64-bit) 3 4R\u0026gt; install.packages(\u0026#34;languageserver\u0026#34;) 最低限必要なパッケージはこのlanguageserverパッケージだけ。\n起動用シェルスクリプトを作成 Windowsだとps1ファイルか何かを使うのだと思うが、Linux/Mac環境しか試してないので不明。\n以下の内容を適当な場所へ保存。ファイル名は何でも良い。\n$HOME/.config/R/vscode-r-conda.sh 1#!/bin/bash 2 3# conda環境名はここで指定する 4 5R_ENV=r42 6 7\\_\\_conda_setup=\u0026#34;![(\\\u0026#39;](https://latex.codecogs.com/svg.latex?%28%27 \u0026#34;(\u0026#39;\u0026#34;)HOME/mambaforge/bin/conda\u0026#39; \u0026#39;shell.zsh\u0026#39; \u0026#39;hook\u0026#39; 2\\\u0026gt; /dev/null)\u0026#34; 8if \\[ ![? -eq 0 \\]; then eval \\\u0026#34;](https://latex.codecogs.com/svg.latex?%3F%20-eq%200%20%5D%3B%20then%20%20eval%20%22 \u0026#34;? -eq 0 ]; then eval \u0026#34;\u0026#34;)\\_\\_conda_setup\u0026#34; 9else 10if \\[ -f \u0026#34;![HOME/mambaforge/etc/profile.d/conda.sh\\\u0026#34; \\]; then . \\\u0026#34;](https://latex.codecogs.com/svg.latex?HOME%2Fmambaforge%2Fetc%2Fprofile.d%2Fconda.sh%22%20%5D%3B%20then%20%20.%20%22 \u0026#34;HOME/mambaforge/etc/profile.d/conda.sh\u0026#34; ]; then . \u0026#34;\u0026#34;)HOME/mambaforge/etc/profile.d/conda.sh\u0026#34; 11else 12export PATH=\u0026#34;![HOME/mambaforge/bin:](https://latex.codecogs.com/svg.latex?HOME%2Fmambaforge%2Fbin%3A \u0026#34;HOME/mambaforge/bin:\u0026#34;)PATH\u0026#34; 13fi 14fi 15unset \\_\\_conda_setup 16 17if \\[ -f \u0026#34;![HOME/mambaforge/etc/profile.d/mamba.sh\\\u0026#34; \\]; then . \\\u0026#34;](https://latex.codecogs.com/svg.latex?HOME%2Fmambaforge%2Fetc%2Fprofile.d%2Fmamba.sh%22%20%5D%3B%20then%20%20.%20%22 \u0026#34;HOME/mambaforge/etc/profile.d/mamba.sh\u0026#34; ]; then . \u0026#34;\u0026#34;)HOME/mambaforge/etc/profile.d/mamba.sh\u0026#34; 18fi 19 20mamba deactivate \u0026amp;\u0026amp; mamba activate \\$R_ENV 21 22radian 一応実行可能になってるか確認する。\n1chmod +x /home/snitch/.config/R/vscode-r-conda.sh 2/home/snitch/.config/R/vscode-r-conda.sh 正常にconda環境のRがradianで立ち上がればOK。\nVSCodeに登録 最後にVSCodeの登録をする。\n作業完了、実行確認 ここまでやれば、conda環境がVSCodeの実行環境になったはず。このqmdファイルで実行できるか試してみる。\n1plot(iris) バッチリ✴️\nもしもバージョン変更をしたくなったら、conda環境を作り直してからシェルスクリプトの仮想環境名を変更するだけで良いので、超簡単。\n自分の場合は数十人で使っている共有サーバーなので二三年に一度しかアプデできないし、LinuxのOS的な問題でRバージョンを上げられないという悲しい状況です。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2022-09-22T00:00:00Z","permalink":"https://snitch0.github.io/p/r-vscode-conda/","title":"VSCodeでconda環境のRをradianとともに使う"},{"content":"LinterとFormatterにも色々あることを知る 先日Twitterを徘徊していたら、ruffというrust製のpython linterのレポジトリを発見した。試しに使ってみたら本当に爆速で驚き😲\nで、自分はVSCodeユーザーなので、どうやったらVSCodeのlinterとしてruffを使えるのだろうと思ったら現時点では対応してないみたいだった。詳しいことはよく分からないが、どうやらVSCodeのpython拡張側での対応が必要らしく、少なくともVSCode python拡張のメンテナが実装することはないらしい。\n残念だなぁと思ったが、実際VSCode公式のpylint以外の選択肢についてあんまり知らなかったので調べてみることに。\n現在サポートされているlinter Command palletteから「Python: リンターを選択」を実行したとき、bandit、flake8、mypy、prospector、pycodestyle、pydocstyle、py lama、pylintの8つが選択可能だった。\n違いは以下の記事がとても参考になった。\nlinter flake8 + mypy が自分的には必須かなと思った。\nflake8はざっと見た感じ、コーディング規約を必要十分な感じに網羅していると思った。 mypyは型チェックするのに必須。\nでもせっかく調べたので、banditも入れてみた。セキュリティを気をつけ無きゃいけない機会は仕事上ほとんどないけど。\nformatter 現状あまり選択肢があるわけではないが、blackが割と厳しめでよさそう。\n使ってみたら一行あたりの文字数制限がblackとflake8で食い違ってしまったので、flake8の実行オプションを設定してやる必要があるのと、エディタの縦線の位置をずらしてあげる。\n1{ 2 \u0026#34;python.linting.flake8Enabled\u0026#34;: true, 3 \u0026#34;python.linting.flake8Args\u0026#34;: [ 4 \u0026#34;--max-line-length\u0026#34;, \u0026#34;88\u0026#34;, \u0026#34;--ignore=E203,W503,W504\u0026#34; 5 ], 6} コレに関しては以下の記事を参考にさせていただいた。\n完成品 結局あれこれいじってこうなった。\nWSL2の設定ファイルなのでスリムだが、気づけばpython系とneovim系ぐらいしか設定してないのか。\n1 2{ 3 \u0026#34;python.linting.flake8Enabled\u0026#34;: true, 4 \u0026#34;python.linting.flake8Args\u0026#34;: [ 5 \u0026#34;--max-line-length\u0026#34;, \u0026#34;88\u0026#34;, \u0026#34;--ignore=E203,W503,W504\u0026#34; 6 ], 7 \u0026#34;python.linting.mypyEnabled\u0026#34;: true, 8 \u0026#34;python.languageServer\u0026#34;: \u0026#34;Pylance\u0026#34;, 9 \u0026#34;python.analysis.completeFunctionParens\u0026#34;: true, 10 \u0026#34;python.analysis.logLevel\u0026#34;: \u0026#34;Warning\u0026#34;, 11 \u0026#34;python.linting.banditEnabled\u0026#34;: true, 12 \u0026#34;python.testing.pytestEnabled\u0026#34;: true, 13 \u0026#34;[python]\u0026#34;: { 14 \u0026#34;editor.defaultFormatter\u0026#34;: null, 15 \u0026#34;editor.formatOnSave\u0026#34;: true 16 }, 17 \u0026#34;python.formatting.provider\u0026#34;: \u0026#34;black\u0026#34;, 18 \u0026#34;python.analysis.typeCheckingMode\u0026#34;: \u0026#34;basic\u0026#34;, 19 \u0026#34;vscode-neovim.mouseSelectionStartVisualMode\u0026#34;: false, 20 \u0026#34;vscode-neovim.neovimInitVimPaths.linux\u0026#34;: \u0026#34;~/.config/nvim/init.lua\u0026#34;, 21 \u0026#34;editor.lineNumbers\u0026#34;: \u0026#34;relative\u0026#34;, 22} ","date":"2022-09-21T00:00:00Z","permalink":"https://snitch0.github.io/p/python-linter-formatter/","title":"Pythonのlinterとformatter事情(@VisualStudioCode)"},{"content":"書籍 データ分析のための数理モデル入門　本質をとらえた分析のために[ 江崎貴裕 ] リンク\n⭐⭐⭐⭐(星4)\nソシム社のデータ分析シリーズの一冊目。めちゃくちゃTwitter上で評判が良かったので気にはなっていたが、youtubeでとても勉強させてもらっているアイシア・ソリッドさん(のマスター)がシリーズ4冊目をこの頃出版されたということなので、Kindleセールにてまとめ買いをした。 めっちゃわかりやすい説明をしてくれるアイシアさんがシリーズ全作オススメされているので、きっと参考になるだろうと思いつつ、Amazonレビューもそれなりに高く、読む前の期待値としては高め。\n結論から言うと、データ分析に少なからず関わる機会がある初学者にはとてもお勧め。よく使う統計手法には慣れている中級者以上でも、視野を広げたいのならとてもお勧め。 数式的な理解がないと満足出来ない人にはお勧めできない。なぜなら本書では数式が全くといって良いほど出てこないから。\nタイトル通り本書は数式モデルについて解説しているが、多項式モデルや一般線形モデルに限らず、統計モデルや確率モデルにもしっかり触れられており、最後には時系列モデルや機械学習モデルにも触れられている。難解な数式はほとんど無く、メリットデメリットが例示付きでとにかく浅く広く解説されている。\n私的には聞いたことはあるけど使ったこと無いモデルとか、まるで聞いたことないモデルまで、様々なモデルの存在を知ることができ、本当に買って良かったと思う。\n星5にならなかった理由だが、これはおそらく自分の性格の問題だ。本当に全てが浅く紹介されているだけなので、それぞれのモデルについて深く知りたいなら別の参考書をあたる必要がある。その「なんとなく分かった気になっておいて、とりあえず前に進む」というのが最初のうちはなかなか出来なかったので、全然読み進められなかった。。 しかし、適宜たくさんの参考書が筆者により紹介されているし、たしかに一部の参考書を引いてみるととても分かりやすかった。\nこの一冊で数理モデルを扱えるようになるわけでは無いが、この一冊から入門し、全体を俯瞰したのちに細かい分野を別の参考書で補う勉強スタイルが非常に効率的かも。\n分析者のためのデータ解釈学入門　データの本質をとらえる技術[ 江崎貴裕 ] ⭐⭐⭐⭐⭐(星5)\nリンク\nこれも前述と同じ江崎先生による書籍で、ソシムデータ分析シリーズの二作目。\n正直この本は傑作級に素晴らしい。これまでに読んだ1どの統計書よりも分かりやすく、かつ網羅的に「統計学を使う上での注意点」が網羅されている。仮説検定法に潜む問題や機械学習における過学習の問題など有名どころはもちろん、サンプルサイズと効果量の話とか、様々なバイアスの話とか、、、学生の時に習った(であろう)重要ポイントがくまなく言及されている。\n会社の人たちに「黙ってこれ読んでから質問してくれ」と言いたいレベルで、本書の内容はデータ分析に携わる人なら必ず知っておくべき内容ばかりが詰まってる。\n「数理モデル」と同様、本書にも数式はほぼ登場しないが、前書よりも一つ一つのイシューに対する説明がより丁寧になっている。「数理モデル」は一通りサーっと読み通してから、引っかかる部分があれば追加で勉強、というスタイルだが、本書はこの一冊をとにかくじっくり熟読すれば様々なバイアスの存在・問題点を学ぶことが出来る。\nニーチェが京都にやってきて17歳の私に哲学のこと教えてくれた。[ 原田まりる ] リンク\n⭐⭐⭐(星3)\nこれは期待してなかったけど、意外になかなか面白かった本。\nKindleのまとめ買いセール[^2]の数合わせで購入。「若者ウケを狙った寒いなりきりラノベかなぁ\u0026hellip;」と思いきやちょっと違った。\nストーリーはこうだ。失恋をした女子高生のもとへ転生したニーチェがやってきて、「祝福できないくらいならいっそ呪ってしまえ」と言いながら彼女に哲学を説く。\nその後キルケゴールやサルトルといった歴史上の哲学者もニーチェと同じように転生者として登場し、それぞれの哲学を彼女に説く。様々な哲学の考え方を知るに従い、失恋や自身の親との関係などで抱えていたもやもやしたものに気持ちの区切りを付けることができるようになり、成長していくという話。\nはじめはなろう系の異世界転生のような月並みのストーリーとして読んでいたのだが、読み始めてすぐその間違いに気がつく。この本は小説として読むのではなく、会話形式でそれぞれの哲学者の考えを子供にも分かるように説明した極めて平易な哲学書と解釈するのが正しいのだ。そう考えると極めて読みやすく、分かりやすい。というか哲学書はこうやって説明してくれればいいんだ、とはっとした。\nAmazonレビューは星4.5と比較的高いが、皆ストーリーを面白いと言っているわけではないので私と同じ感想なんだと思う。\n「子供にも分かるように」とは言ったが、正直高校生には難しいかも。人生経験的に共感できるポイントが少なそう。社会人なら共感ポイントが多く、むしろ救われる気持ちにすらなるかもしれないと思う。\nガジェット 実は自分、結構ガジェット好きです。結構ガジェット系youtuberの動画をずっと見ちゃう。\nKeychron K2 non-backlight red リンク\n🌟🌟🌟(星3兆個)\nKeychronは香港のメーカーで、アメリカのキーボード大好きyoutuberにも人気があるらしい。\nきっかけはtakuyaさんのNeovim動画で、むっちゃかっけぇと思ったとき。\n調べてみたら100ドルを切る値段でありながら、HHKBなどの超高級キーボード並に打鍵感が良いらしいとのこと。\nkeychronというメーカーを調べてみると、主にキー数の違いによって様々なバージョンのキーボードがあるらしい。詳しい違いについてはやまかふぇさんの動画が詳しい。 見比べた中では最初に見たkeychron \u0026ldquo;K2\u0026quot;が一番良く、カーソルキーやInsキーがうまいこと収まっているところに惚れた。 通常版でも良かったが、別にキーボードが光る必要は無いと思ってる人なのでnon-backlightにした。\n意外とネット通販でも通常価格で販売されていて、在庫さえあればどこでも買えそう。しかし、謎のkyochron.jpという公式っぽいサイトを見つけたので、ここで買ってみた。\nこのサイトで購入した人がほぼ見当たらず、しかも謎に通常販売価格より1000円以上安く(自分が購入したときは9300円、現在は10400円)、発送も香港からということで不安しかなかった。 怖かったのでPaypalで購入し、メールアドレスも捨てアドで登録。6-9日くらいは到着に要すると書いてあったが10日立っても届かず、不安しかなかった(チャットサポートも不通)。 が、結局11日目で佐川急便到着。疑ってすまなかった。。\n感想は最高。打鍵感が本当に気持ちいい。高級キーボードの「スコスコ感」ってこれかぁ。\nHHKBなら最低でも3万円くらいは積まないといけないが、keychronは1万円で入門できて非常にお手軽。おすすめ。\nなお気に入りすぎて純正パームレストも購入した。(これは楽天スーパーセール時にヤマダだかコジマだかのショップにて購入)\nhttps://t.co/7pes6LbZAF なるサイトがhttps://t.co/e2x0hPlcSj や店頭価格よりも安いもんだから詐欺サイトかと疑ってしまいましたが、ちゃんと届きました😇\nkeychron K2 … うっとりする美しさ… pic.twitter.com/YMe5xVnMVK\n\u0026mdash; スニッチ (@excel2rlang) September 10, 2022 ぶっちゃけ統計学勉強中なので5冊も読んでないけど･･･\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2022-09-19T00:00:00Z","permalink":"https://snitch0.github.io/p/items-22-09/","title":"最近買ったもの(2022-9月)"},{"content":"pythonライブラリの使い方が分からなくなることがある pythonライブラリにはド定番のライブラリがいくつもあるが、それらの仕様は結構忘れがち。\nたとえばcsvのDictWriterクラス。引数がファイルオブジェクトなのかそれともパスを文字列で与えるのか、刹那の思考をはさんだ後にwith open()などと書き始める。\ncsv.DictWriterクラスならまだ良いが、やり方が複数通り存在する場合になるともうカオスだ。urllib.requestとrequestsのどっち使うんだとか、はたまたurllib3はなんなんだとか。。そんな「結局何が正解なん」案件でsubprocessの使い方についてちょっと思うところがあった。\nsubprocessライブラリの使い方 色々やりたいときはPopenクラスを使う、簡単なユーズケースならrunメソッドを使う、という認識でいたので、基本的に何も考えずPopenクラスを毎回使っていた。\nこんな感じ。\n1from subprocess import Popen 2 3ps = Popen([\u0026#39;ls\u0026#39;, \u0026#39;-lah\u0026#39;]) 4ps.wait() Popen.wait()するタイミングをずらすことで非同期処理的にマルチプロセス化することもあるため、個人的にはシェルスクリプトとしてpythonを使う際には欠かせないやつ🤔\nstdoutを使おうとするとちょい面倒 標準出力を取得しようとするとsubprocess.PIPEが必要になるのでちょいめんどくさい。バイト文字列で選ってくるところがなおさら😅\n1from subprocess import Popen, PIPE 2 3ps = Popen([\u0026#39;echo\u0026#39;, \u0026#39;hello\u0026#39;], stdout=PIPE) 4s_out = ps.stdout.readlines() 5print([s.decode(\u0026#34;utf-8\u0026#34;) for s in s_out]) ['hello\\n'] ググったらsubprocess.runの方が楽らしいと知る こちらのQiita記事を拝読すると、「suborocess.runを使うのが良いとされている」とか「capture_outputを使ってもできる」というのを聞いて👀から🐟!\n1import subprocess 2 3ps = subprocess.run([\u0026#39;echo\u0026#39;, \u0026#39;hello\u0026#39;], capture_output=True, text=True) 4s_out = ps.stdout 5print(s_out) hello \u0026ndash;はぁ･･･勉強不足でした。。すみません。。と思いつつdocumentを見ると確かに以下のようにrunメソッドが推奨されていた。1\nサブプロセスを起動するために推奨される方法は、すべての用法を扱える run() 関数を使用することです。より高度な用法では下層の Popen インターフェースを直接使用することもできます。\nまた、capture_outputオプションはpython3.7で実装されたらしい。なるほど比較的新しいけど、少なくともセキュリティサポートされているバージョンをきちんと追ってる人なら間違えてはいけないポイントだろう。\nみんなちゃんと情報フォローしてるのか?と気になって調べてみた 結論、Qiita記事はちょっと危険だなと思った。自分も似たようなものだが･･･\nやばいパターン①推奨されていない書き方を解説している shell=Trueを使えば簡単にパイプが使えるので、便利なことは便利。しかし、任意のコードを実行させられる可能性があるので、ウェブフレームワークなどで使うのは御法度というのが有名。 これを説明せずに「shell=Trueの方が初心者にはオススメ」などと平然と書かれているケースがあった。\nちょっと気になったパターン②capture_outputオプションの言及がない 先に言っておくが、個人ブログは高確率でこれに言及している。最初の投稿時に言及が無くとも、ほぼ全員が追記していた。すごい😲きっと多分自分のコンテンツに責任を持っているのだろう。自分もそうならねば。\nPopen.PIPEの方法はQiita記事だけをみていたらゴールドスタンダードに見えるだろう。現に自分がそうだった。\nやっぱ、公式ドキュメントはちゃんと読んだ方が良いわ 正直自分はpythonドキュメントきちんと読んでこなかった。だってフォントとかレイアウトとかのせいか、読みにくいんだもん。\nしかし、細かい推奨レベルや後で追加されたオプションなど、知らないと恥かく内容も多いと感じた。\nコツコツpythonドキュメントをちゃんと読み直してみるのもいい学習方法かもしれない。\nこれを推奨ととるかは読解力次第な気もする\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2022-09-12T00:00:00Z","permalink":"https://snitch0.github.io/p/python-subprocess/","title":"subprocessライブラリの使い方って結局何が正解なん"},{"content":"Headings 一般的なmarkdownと同様、\u0026lt;h1\u0026gt;-\u0026lt;h6\u0026gt;タグに変換される。\nh1 h2 h3 h4 h5 h6 Paragraph Sudden looked elinor off gay estate nor silent. Son read such next see the rest two. Was use extent old entire sussex. Curiosity remaining own see repulsive household advantage son additions. Supposing exquisite daughters eagerness why repulsive for. Praise turned it lovers be warmly by. Little do it eldest former be if.\nRandom TextGenerator\n私は多年どうしても同じ存在めとして事の時の当てるなう。よし次第が納得めはよほど大きな失敗たたかもがさてならたがも経過いうたましょから、全くにも思わたたないたら。本領をいうですのももっとも前に何だかだませう。いったい嘉納さんを標榜書生ますます推察をすみた一口いわゆる主義何か活動にというお仕事たましででしょたって、いわゆる十月はそれかがた学校よりしで、岡田さんの訳が人の私がやはりお入会と致さけれども私肴がご講演としようについに不反対がつけですでて、ちっとも正しく意味をいううてならまいので掘りでで。つまりそうしてご鶴嘴を待っ気もたった公平ときまったて、そのらとはありありからという時分より云っばいますう。\nすぐ使えるダミーテキスト\nBack quote Backquotesはquartoの特性というよりは、hugoのテーマ次第なところが大きい。\nBackquote without attribution Be yourself;everyone else is already taken. ― Oscar Wilde\nBackquote with attribution Two things are infinite: the universe and human stupidity; and I\u0026rsquo;m not sure about the universe.\nAlbert Einstein1\nTables Col1 Col2 Tom 24 Clara 34 Italics Bold Code italics bold code Code block quartoの実行結果がネイティブに動くのは素晴らしいなあ。\ncodeタグのcssは改良の余地がありそう。\nMarkdown simple code block 1library(dplyr) 2 3mtcars |\u0026gt; 4 group_by(cyl) |\u0026gt; 5 summarise(mean(mpg)) Hugo hilighting shortcode Hugoのショートコードはquartoのレンダリング時に若干崩壊するようだ。\n1 1\u0026lt;!doctype html\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 5 \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; 9\u0026lt;/body\u0026gt; 10\u0026lt;/html\u0026gt; 1\\\u0026lt;!doctype html\\\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 3\u0026lt;head\u0026gt; 4\u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 5\u0026lt;title\u0026gt; 6Example HTML5 Document 7\u0026lt;/title\u0026gt; 8\u0026lt;/head\u0026gt; 9\u0026lt;body\u0026gt; 10\u0026lt;p\u0026gt; 11Test 12\u0026lt;/p\u0026gt; 13\u0026lt;/body\u0026gt; 14\u0026lt;/html\u0026gt; Quarto code chunk 1library(dplyr) 次のパッケージを付け加えます: 'dplyr' 以下のオブジェクトは 'package:stats' からマスクされています: filter, lag 以下のオブジェクトは 'package:base' からマスクされています: intersect, setdiff, setequal, union 1mtcars |\u0026gt; 2 group_by(cyl) |\u0026gt; 3 4summarise(mean(mpg)) # A tibble: 3 × 2 cyl `mean(mpg)` \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; 1 4 26.7 2 6 19.7 3 8 15.1 Quarto code chunk with plot 1pacman::p_load(ggplot2) 2 3mtcars |\u0026gt; 4 ggplot(aes(x = mpg, y = hp, col = cyl)) + 5 geom_point() 1import seaborn.objects as so 2from palmerpenguins import load_penguins 3 4penguins = load_penguins() 5 6( 7 so.Plot(penguins, x=\u0026#34;bill_length_mm\u0026#34;, y=\u0026#34;bill_depth_mm\u0026#34;) 8 .add(so.Dot()) 9 .show() 10) Diff 1[dependencies.bevy] 2git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; 3rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; 4- features = [\u0026#34;dynamic\u0026#34;] 5+ features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements \u0026mdash; abbr, sub, sup, kbd, mark 1\u0026lt;abbr title=\u0026#34;Graphics Interchange Format\u0026#34;\u0026gt;GIF\u0026lt;/abbr\u0026gt; is a bitmap image format. 2 3H\u0026lt;sub\u0026gt;2\u0026lt;/sub\u0026gt;O 4 5X\u0026lt;sup\u0026gt;n\u0026lt;/sup\u0026gt; + Y\u0026lt;sup\u0026gt;n\u0026lt;/sup\u0026gt; = Z\u0026lt;sup\u0026gt;n\u0026lt;/sup\u0026gt; 6 7Press \u0026lt;kbd\u0026gt;\u0026lt;kbd\u0026gt;CTRL\u0026lt;/kbd\u0026gt;+\u0026lt;kbd\u0026gt;ALT\u0026lt;/kbd\u0026gt;+\u0026lt;kbd\u0026gt;Delete\u0026lt;/kbd\u0026gt;\u0026lt;/kbd\u0026gt; to end the session. 8 9Most \u0026lt;mark\u0026gt;salamanders\u0026lt;/mark\u0026gt; are nocturnal, and hunt for insects, worms, and other small creatures. GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image Google\nRich-content Shortcodeにdouble-quotationが含まれていると、rendering時にsmart-quoteに変換されてしまう仕様らしい。 これはシンタックスエラーの引き金となってhugoがレンダリングに失敗してしまうので、現状主導でmarkdownファイルを修正してやる必要がある。Issueあげようかと思ったら既に修正に取り組んでくれているみたいだった。今後に期待。\nQuote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote youtube アルバート・アインシュタイン\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2022-09-11T00:00:00Z","permalink":"https://snitch0.github.io/p/blog-syntax/","title":"Quarto(とHugo)のSyntax"},{"content":"QuartoにおけるPythonの仕様 Quartoは以下のようにRでもPythonでも一つのファイルでレンダリングできるのが素晴らしい✨\nしかし、Python単独なら特に難しいことは無いが、RとPythonが共存するとある問題が生じる。\n1result = lm(data = iris, Sepal.Width ~ Sepal.Length) 2summary(result) Call: lm(formula = Sepal.Width ~ Sepal.Length, data = iris) Residuals: Min 1Q Median 3Q Max -1.1095 -0.2454 -0.0167 0.2763 1.3338 Coefficients: Estimate Std. Error t value Pr(\u0026gt;|t|) (Intercept) 3.41895 0.25356 13.48 \u0026lt;2e-16 *** Sepal.Length -0.06188 0.04297 -1.44 0.152 --- Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 Residual standard error: 0.4343 on 148 degrees of freedom Multiple R-squared: 0.01382, Adjusted R-squared: 0.007159 F-statistic: 2.074 on 1 and 148 DF, p-value: 0.1519 1from sklearn.datasets import load_iris 2from sklearn import linear_model 3import pandas as pd 4 5iris = load_iris() 6df = pd.DataFrame(iris.data, columns = [\u0026#39;SepalLength\u0026#39;, \u0026#39;SepalWidth\u0026#39;, \u0026#39;PetalLength\u0026#39;, \u0026#39;PetalWidth\u0026#39;]) 7 8df[\u0026#34;Name\u0026#34;] = pd.Series(iris.target) 9 10model = linear_model.LinearRegression() 11ft = model.fit(df[[\u0026#34;SepalLength\u0026#34;]], df[[\u0026#34;SepalWidth\u0026#34;]]) 12print(f\u0026#34;Intercept: {ft.intercept_[0]:.6}, Coef: {ft.coef_[0][0]:.6}\u0026#34;) Intercept: 3.41895, Coef: -0.0618848 エンジンにjupyterを使う場合 Pythonを使うなら、おそらくこれが一番明快でおすすめの方法になる。\nqmdのyamlヘッダにてengine: jupyterを選択しておく方法。たとえば、以下のようにする。\n1title: \u0026#34;QuartoでPythonを使うときの注意とか\u0026#34; 2description: 意外と複雑な仕様?😈 3author: Snitch 4date: \u0026#34;2022-09-11\u0026#34; 5categories: 6 - Quarto 7 - R 8 - Python 9 - Reticulate 10 - Linux 11tags: 12 - quarto 13 - R 14 - Python 15format: hugo 16slug: \u0026#34;python-and-quarto\u0026#34; 17jupyter: python3 18html-math-method: webtex 一部はhugo関係のものもあるが、jupyterやhtml-math-method の部分はquartoに由来する。(いずれこのヘッダオプションも研究しなければ・・・)\n要はjupyterのpython3カーネルを使っているというだけなので、bashカーネルだってRカーネルだって存在さえしてれば使えるということなのだろう。\nこのオプションを指定している間に起こる諸問題1はjupyter由来のものになると思われるので、対処はしやすそう。しかしipywidgetなどはhugoへのレンダリングは厳しそう。qmdではなくipynbからやる方が無難だろう。\nしかし、このjupyterカーネルでは単一のカーネルしか指定できないので、RとPythonの共存は不可能である･･･。\nエンジンにjupyterを使用しない場合 jupyterを指定しない場合はpythonセルがreticulate+knitr経由で実行される。PythonとR両方を使ったドキュメントを気軽に書くことが出来るのはreticulate様のおかげだったのだ。万歳。\nしかし、reticulateは親切なんだかお節介なんだか分からないが、python実行バイナリのパス指定方法が複数あるせいで設定変更が一発で効かないことがしばしばあり、個人的にそれがreticulateを使う気にならない理由の一つ🐍2\nそして、reticulateの設定で見事にハマった。\n備忘録も兼ねてこのハマりポイント2つを残しておきたいと思う。\nreticulateのハマりポイント 仮想環境には気をつける 自分は普段pyenvとmambaforgeの二つを主なpythonソースとして使っている。前者は汎用的なコーディング(シェルスクリプト作成など)用で、後者はガッツリバイオインフォ解析する時用で使い分けている。\n今回何も考えずに実行しようとしたら、pyenvがうまく認識されてくれなかった。\n調べてみたところ、shared libraryを作らないpyenvはそれを必須とするreticulateと相性が悪いらしい。このページに書かれた手順を試してはみたが、やはり同じエラーが出るだけだった。\n諦めてmambaforgeに専用の仮想環境を用意してやったところ、うまく動作した。\n1mamba create -n pyr python=3.10 RETICULATE_PYTHON環境変数に注意する 要はこの変数に適切なパスが通っていれば問題ないが、環境変数であるせいか、セッションステータスによっては反映されたりされなかったりするのが面倒だった。\nネットを見ると色々と対処方法が書いてあり、use_conda()を使うだとか、use_python()を使うとかの情報があるが、``./Renviron`に変数を記入してやるのが一番問題が起きにくかった。根拠が曖昧な経験則でアレだが、reticulateはこういう「なんでうまく行ったのがが分からない」ケースがちょいちょいある。\n.Renviron 1RETICULATE_PYTHON=\u0026#34;~/mambaforge/envs/pyr/bin/python\u0026#34; 他にも.RprofileにSys.setenv(RETICULATE_PYTHON=)などと定義してやる方法もあるらしいが、なんとなくOS側で定義されていた方が安心な気がする。\nmatplotlibのplot inlineとか。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nならRstudio使いなさいよみたいな声が聞こえてきそうだが、Rstudioでpythonコーディングは結構キツい。pythonコーディングはVSCodeやPyCharmの方が圧倒的に優れており、めいっぱいPython書く人ならこれに同意してくれると思う。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2022-09-11T00:00:00Z","permalink":"https://snitch0.github.io/p/python-and-quarto/","title":"QuartoでPythonを使うときの注意とか"},{"content":"動機 私はexcel2rlang.comというRプログラミング解説ブログを管理しているヒトです。猫の名前をお借りして、スニッチという名前でやっています🐈‍⬛\nメインブログではR関連でまとまった内容を時間をかけて推敲しながら作っていく方針だったのですが、Rとは関係の無い話や、ライトな話題を吐き出しにくいことや、Wordpressとphpというフレームワークが気に入らないことなどの不満を常に抱えていました。\nあと、二ヶ月位前に「スニッチさんのブログ、読み込み遅いですね」と言われてピキったのもモチベの一つですね\u0026hellip;😓\nそんな折、quartoがアツいぞという話をあっちこっちで聞くようになってきて、このトレンドには乗っておこうかなという軽い気持ちでquartoを使ったブログを作ってみることにしました。\nHugo and Quarto Quartoのdocumentationをよくよく読んだらHugoへのレンダリングが可能ということだったので、Hugoでブログを作ってみることにしました。\n調べてみたところ、{blogdown}パッケージを通じてhugoのレンダリングの持ち込む方法をとっている人は見かけるものの、Hugo themeを選ばずにquartoを使ったブログの作り方を解説している人は見つかりませんでした。\nこのブログでのquartoブログの作り方解説が誰かのためになれば嬉しいし、まとまった内容になったらメインブログの方に再編してアップしても良いかなと思います。\nこれからいっぱい書くぞー って最初は誰でも意気込みますが、軽い内容のエントリを量産していこうと思います🖐️\n","date":"2022-09-10T00:00:00Z","permalink":"https://snitch0.github.io/p/first-post/","title":"Quartoを使った2ndブログを作ってみた"}]