[{"content":"pythonライブラリの使い方が分からなくなることがある pythonライブラリにはド定番のライブラリがいくつもあるが、それらの仕様は結構忘れがち。\nたとえばcsvのDictWriterクラス。引数がファイルオブジェクトなのかそれともパスを文字列で与えるのか、刹那の思考をはさんだ後にwith open()などと書き始める。\ncsv.DictWriterクラスならまだ良いが、やり方が複数通り存在する場合になるともうカオスだ。urllib.requestとrequestsのどっち使うんだとか、はたまたurllib3はなんなんだとか。。そんな「結局何が正解なん」案件でsubprocessの使い方についてちょっと思うところがあった。\nsubprocessライブラリの使い方 色々やりたいときはPopenクラスを使う、簡単なユーズケースならrunメソッドを使う、という認識でいたので、基本的に何も考えずPopenクラスを毎回使っていた。\nこんな感じ。\n1from subprocess import Popen 2 3ps = Popen([\u0026#39;ls\u0026#39;, \u0026#39;-lah\u0026#39;]) 4ps.wait() Popen.wait()するタイミングをずらすことで非同期処理的にマルチプロセス化することもあるため、個人的にはシェルスクリプトとしてpythonを使う際には欠かせないやつ🤔\nstdoutを使おうとするとちょい面倒 標準出力を取得しようとするとsubprocess.PIPEが必要になるのでちょいめんどくさい。バイト文字列で選ってくるところがなおさら😅\n1from subprocess import Popen, PIPE 2 3ps = Popen([\u0026#39;echo\u0026#39;, \u0026#39;hello\u0026#39;], stdout=PIPE) 4s_out = ps.stdout.readlines() 5print([s.decode(\u0026#34;utf-8\u0026#34;) for s in s_out]) ['hello\\n'] ググったらsubprocess.runの方が楽らしいと知る こちらのQiita記事を拝読すると、「suborocess.runを使うのが良いとされている」とか「capture_outputを使ってもできる」というのを聞いて👀から🐟!\n1import subprocess 2 3ps = subprocess.run([\u0026#39;echo\u0026#39;, \u0026#39;hello\u0026#39;], capture_output=True, text=True) 4s_out = ps.stdout 5print(s_out) hello \u0026ndash;はぁ･･･勉強不足でした。。すみません。。と思いつつdocumentを見ると確かに以下のようにrunメソッドが推奨されていた。1\nサブプロセスを起動するために推奨される方法は、すべての用法を扱える run() 関数を使用することです。より高度な用法では下層の Popen インターフェースを直接使用することもできます。\nまた、capture_outputオプションはpython3.7で実装されたらしい。なるほど比較的新しいけど、少なくともセキュリティサポートされているバージョンをきちんと追ってる人なら間違えてはいけないポイントだろう。\nみんなちゃんと情報フォローしてるのか?と気になって調べてみた 結論、Qiita記事はちょっと危険だなと思った。自分も似たようなものだが･･･\nやばいパターン①推奨されていない書き方を解説している shell=Trueを使えば簡単にパイプが使えるので、便利なことは便利。しかし、任意のコードを実行させられる可能性があるので、ウェブフレームワークなどで使うのは御法度というのが有名。 これを説明せずに「shell=Trueの方が初心者にはオススメ」などと平然と書かれているケースがあった。\nちょっと気になったパターン②capture_outputオプションの言及がない 先に言っておくが、個人ブログは高確率でこれに言及している。最初の投稿時に言及が無くとも、ほぼ全員が追記していた。すごい😲きっと多分自分のコンテンツに責任を持っているのだろう。自分もそうならねば。\nPopen.PIPEの方法はQiita記事だけをみていたらゴールドスタンダードに見えるだろう。現に自分がそうだった。\nやっぱ、公式ドキュメントはちゃんと読んだ方が良いわ 正直自分はpythonドキュメントきちんと読んでこなかった。だってフォントとかレイアウトとかのせいか、読みにくいんだもん。\nしかし、細かい推奨レベルや後で追加されたオプションなど、知らないと恥かく内容も多いと感じた。\nコツコツpythonドキュメントをちゃんと読み直してみるのもいい学習方法かもしれない。\nこれを推奨ととるかは読解力次第な気もする\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2022-09-12T00:00:00Z","permalink":"https://snitch0.github.io/p/python-subprocess/","title":"subprocessライブラリの使い方って結局何が正解なん"},{"content":"Headings 一般的なmarkdownと同様、\u0026lt;h1\u0026gt;-\u0026lt;h6\u0026gt;タグに変換される。\nh1 h2 h3 h4 h5 h6 Paragraph Sudden looked elinor off gay estate nor silent. Son read such next see the rest two. Was use extent old entire sussex. Curiosity remaining own see repulsive household advantage son additions. Supposing exquisite daughters eagerness why repulsive for. Praise turned it lovers be warmly by. Little do it eldest former be if.\nRandom TextGenerator\n私は多年どうしても同じ存在めとして事の時の当てるなう。よし次第が納得めはよほど大きな失敗たたかもがさてならたがも経過いうたましょから、全くにも思わたたないたら。本領をいうですのももっとも前に何だかだませう。いったい嘉納さんを標榜書生ますます推察をすみた一口いわゆる主義何か活動にというお仕事たましででしょたって、いわゆる十月はそれかがた学校よりしで、岡田さんの訳が人の私がやはりお入会と致さけれども私肴がご講演としようについに不反対がつけですでて、ちっとも正しく意味をいううてならまいので掘りでで。つまりそうしてご鶴嘴を待っ気もたった公平ときまったて、そのらとはありありからという時分より云っばいますう。\nすぐ使えるダミーテキスト\nBack quote Backquotesはquartoの特性というよりは、hugoのテーマ次第なところが大きい。\nBackquote without attribution Be yourself;everyone else is already taken. ― Oscar Wilde\nBackquote with attribution Two things are infinite: the universe and human stupidity; and I\u0026rsquo;m not sure about the universe.\nAlbert Einstein1\nTables Col1 Col2 Tom 24 Clara 34 Italics Bold Code italics bold code Code block quartoの実行結果がネイティブに動くのは素晴らしいなあ。\ncodeタグのcssは改良の余地がありそう。\nMarkdown simple code block 1library(dplyr) 2 3mtcars |\u0026gt; 4 group_by(cyl) |\u0026gt; 5 summarise(mean(mpg)) Hugo hilighting shortcode Hugoのショートコードはquartoのレンダリング時に若干崩壊するようだ。\n1 1\u0026lt;!doctype html\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 5 \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; 9\u0026lt;/body\u0026gt; 10\u0026lt;/html\u0026gt; 1\\\u0026lt;!doctype html\\\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 3\u0026lt;head\u0026gt; 4\u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 5\u0026lt;title\u0026gt; 6Example HTML5 Document 7\u0026lt;/title\u0026gt; 8\u0026lt;/head\u0026gt; 9\u0026lt;body\u0026gt; 10\u0026lt;p\u0026gt; 11Test 12\u0026lt;/p\u0026gt; 13\u0026lt;/body\u0026gt; 14\u0026lt;/html\u0026gt; Quarto code chunk 1library(dplyr) 次のパッケージを付け加えます: 'dplyr' 以下のオブジェクトは 'package:stats' からマスクされています: filter, lag 以下のオブジェクトは 'package:base' からマスクされています: intersect, setdiff, setequal, union 1mtcars |\u0026gt; 2 group_by(cyl) |\u0026gt; 3 4summarise(mean(mpg)) # A tibble: 3 × 2 cyl `mean(mpg)` \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; 1 4 26.7 2 6 19.7 3 8 15.1 Quarto code chunk with plot 1pacman::p_load(ggplot2) 2 3mtcars |\u0026gt; 4 ggplot(aes(x = mpg, y = hp, col = cyl)) + 5 geom_point() 1import seaborn.objects as so 2from palmerpenguins import load_penguins 3 4penguins = load_penguins() 5 6( 7 so.Plot(penguins, x=\u0026#34;bill_length_mm\u0026#34;, y=\u0026#34;bill_depth_mm\u0026#34;) 8 .add(so.Dot()) 9 .show() 10) Diff 1[dependencies.bevy] 2git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; 3rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; 4- features = [\u0026#34;dynamic\u0026#34;] 5+ features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements \u0026mdash; abbr, sub, sup, kbd, mark 1\u0026lt;abbr title=\u0026#34;Graphics Interchange Format\u0026#34;\u0026gt;GIF\u0026lt;/abbr\u0026gt; is a bitmap image format. 2 3H\u0026lt;sub\u0026gt;2\u0026lt;/sub\u0026gt;O 4 5X\u0026lt;sup\u0026gt;n\u0026lt;/sup\u0026gt; + Y\u0026lt;sup\u0026gt;n\u0026lt;/sup\u0026gt; = Z\u0026lt;sup\u0026gt;n\u0026lt;/sup\u0026gt; 6 7Press \u0026lt;kbd\u0026gt;\u0026lt;kbd\u0026gt;CTRL\u0026lt;/kbd\u0026gt;+\u0026lt;kbd\u0026gt;ALT\u0026lt;/kbd\u0026gt;+\u0026lt;kbd\u0026gt;Delete\u0026lt;/kbd\u0026gt;\u0026lt;/kbd\u0026gt; to end the session. 8 9Most \u0026lt;mark\u0026gt;salamanders\u0026lt;/mark\u0026gt; are nocturnal, and hunt for insects, worms, and other small creatures. GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image Google\nRich-content Shortcodeにdouble-quotationが含まれていると、rendering時にsmart-quoteに変換されてしまう仕様らしい。 これはシンタックスエラーの引き金となってhugoがレンダリングに失敗してしまうので、現状主導でmarkdownファイルを修正してやる必要がある。Issueあげようかと思ったら既に修正に取り組んでくれているみたいだった。今後に期待。\nQuote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote youtube アルバート・アインシュタイン\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2022-09-11T00:00:00Z","permalink":"https://snitch0.github.io/p/blog-syntax/","title":"Quarto(とHugo)のSyntax"},{"content":"QuartoにおけるPythonの仕様 Quartoは以下のようにRでもPythonでも一つのファイルでレンダリングできるのが素晴らしい✨\nしかし、Python単独なら特に難しいことは無いが、RとPythonが共存するとある問題が生じる。\n1result = lm(data = iris, Sepal.Width ~ Sepal.Length) 2summary(result) Call: lm(formula = Sepal.Width ~ Sepal.Length, data = iris) Residuals: Min 1Q Median 3Q Max -1.1095 -0.2454 -0.0167 0.2763 1.3338 Coefficients: Estimate Std. Error t value Pr(\u0026gt;|t|) (Intercept) 3.41895 0.25356 13.48 \u0026lt;2e-16 *** Sepal.Length -0.06188 0.04297 -1.44 0.152 --- Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 Residual standard error: 0.4343 on 148 degrees of freedom Multiple R-squared: 0.01382, Adjusted R-squared: 0.007159 F-statistic: 2.074 on 1 and 148 DF, p-value: 0.1519 1from sklearn.datasets import load_iris 2from sklearn import linear_model 3import pandas as pd 4 5iris = load_iris() 6df = pd.DataFrame(iris.data, columns = [\u0026#39;SepalLength\u0026#39;, \u0026#39;SepalWidth\u0026#39;, \u0026#39;PetalLength\u0026#39;, \u0026#39;PetalWidth\u0026#39;]) 7 8df[\u0026#34;Name\u0026#34;] = pd.Series(iris.target) 9 10model = linear_model.LinearRegression() 11ft = model.fit(df[[\u0026#34;SepalLength\u0026#34;]], df[[\u0026#34;SepalWidth\u0026#34;]]) 12print(f\u0026#34;Intercept: {ft.intercept_[0]:.6}, Coef: {ft.coef_[0][0]:.6}\u0026#34;) Intercept: 3.41895, Coef: -0.0618848 エンジンにjupyterを使う場合 Pythonを使うなら、おそらくこれが一番明快でおすすめの方法になる。\nqmdのyamlヘッダにてengine: jupyterを選択しておく方法。たとえば、以下のようにする。\n1title: \u0026#34;QuartoでPythonを使うときの注意とか\u0026#34; 2description: 意外と複雑な仕様?😈 3author: Snitch 4date: \u0026#34;2022-09-11\u0026#34; 5categories: 6 - Quarto 7 - R 8 - Python 9 - Reticulate 10 - Linux 11tags: 12 - quarto 13 - R 14 - Python 15format: hugo 16slug: \u0026#34;python-and-quarto\u0026#34; 17jupyter: python3 18html-math-method: webtex 一部はhugo関係のものもあるが、jupyterやhtml-math-method の部分はquartoに由来する。(いずれこのヘッダオプションも研究しなければ・・・)\n要はjupyterのpython3カーネルを使っているというだけなので、bashカーネルだってRカーネルだって存在さえしてれば使えるということなのだろう。\nこのオプションを指定している間に起こる諸問題1はjupyter由来のものになると思われるので、対処はしやすそう。しかしipywidgetなどはhugoへのレンダリングは厳しそう。qmdではなくipynbからやる方が無難だろう。\nしかし、このjupyterカーネルでは単一のカーネルしか指定できないので、RとPythonの共存は不可能である･･･。\nエンジンにjupyterを使用しない場合 jupyterを指定しない場合はpythonセルがreticulate+knitr経由で実行される。PythonとR両方を使ったドキュメントを気軽に書くことが出来るのはreticulate様のおかげだったのだ。万歳。\nしかし、reticulateは親切なんだかお節介なんだか分からないが、python実行バイナリのパス指定方法が複数あるせいで設定変更が一発で効かないことがしばしばあり、個人的にそれがreticulateを使う気にならない理由の一つ🐍2\nそして、reticulateの設定で見事にハマった。\n備忘録も兼ねてこのハマりポイント2つを残しておきたいと思う。\nreticulateのハマりポイント 仮想環境には気をつける 自分は普段pyenvとmambaforgeの二つを主なpythonソースとして使っている。前者は汎用的なコーディング(シェルスクリプト作成など)用で、後者はガッツリバイオインフォ解析する時用で使い分けている。\n今回何も考えずに実行しようとしたら、pyenvがうまく認識されてくれなかった。\n調べてみたところ、shared libraryを作らないpyenvはそれを必須とするreticulateと相性が悪いらしい。このページに書かれた手順を試してはみたが、やはり同じエラーが出るだけだった。\n諦めてmambaforgeに専用の仮想環境を用意してやったところ、うまく動作した。\n1mamba create -n pyr python=3.10 RETICULATE_PYTHON環境変数に注意する 要はこの変数に適切なパスが通っていれば問題ないが、環境変数であるせいか、セッションステータスによっては反映されたりされなかったりするのが面倒だった。\nネットを見ると色々と対処方法が書いてあり、use_conda()を使うだとか、use_python()を使うとかの情報があるが、``./Renviron`に変数を記入してやるのが一番問題が起きにくかった。根拠が曖昧な経験則でアレだが、reticulateはこういう「なんでうまく行ったのがが分からない」ケースがちょいちょいある。\n.Renviron 1RETICULATE_PYTHON=\u0026#34;~/mambaforge/envs/pyr/bin/python\u0026#34; 他にも.RprofileにSys.setenv(RETICULATE_PYTHON=)などと定義してやる方法もあるらしいが、なんとなくOS側で定義されていた方が安心な気がする。\nmatplotlibのplot inlineとか。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nならRstudio使いなさいよみたいな声が聞こえてきそうだが、Rstudioでpythonコーディングは結構キツい。pythonコーディングはVSCodeやPyCharmの方が圧倒的に優れており、めいっぱいPython書く人ならこれに同意してくれると思う。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2022-09-11T00:00:00Z","permalink":"https://snitch0.github.io/p/python-and-quarto/","title":"QuartoでPythonを使うときの注意とか"},{"content":"動機 私はexcel2rlang.comというRプログラミング解説ブログを管理しているヒトです。猫の名前をお借りして、スニッチという名前でやっています🐈‍⬛\nメインブログではR関連でまとまった内容を時間をかけて推敲しながら作っていく方針だったのですが、Rとは関係の無い話や、ライトな話題を吐き出しにくいことや、Wordpressとphpというフレームワークが気に入らないことなどの不満を常に抱えていました。\nあと、二ヶ月位前に「スニッチさんのブログ、読み込み遅いですね」と言われてピキったのもモチベの一つですね\u0026hellip;😓\nそんな折、quartoがアツいぞという話をあっちこっちで聞くようになってきて、このトレンドには乗っておこうかなという軽い気持ちでquartoを使ったブログを作ってみることにしました。\nHugo and Quarto Quartoのdocumentationをよくよく読んだらHugoへのレンダリングが可能ということだったので、Hugoでブログを作ってみることにしました。\n調べてみたところ、{blogdown}パッケージを通じてhugoのレンダリングの持ち込む方法をとっている人は見かけるものの、Hugo themeを選ばずにquartoを使ったブログの作り方を解説している人は見つかりませんでした。\nこのブログでのquartoブログの作り方解説が誰かのためになれば嬉しいし、まとまった内容になったらメインブログの方に再編してアップしても良いかなと思います。\nこれからいっぱい書くぞー って最初は誰でも意気込みますが、軽い内容のエントリを量産していこうと思います🖐️\n","date":"2022-09-10T00:00:00Z","permalink":"https://snitch0.github.io/p/first-post/","title":"Quartoを使った2ndブログを作ってみた"}]