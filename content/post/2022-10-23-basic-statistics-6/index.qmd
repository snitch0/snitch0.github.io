---
title: 宮川公男「基礎統計学」第五版 第六章主な確率分布 練習問題の解法
description: 　
author: Snitch
date: "2022-10-23"
categories:
  - Statistics
  - R
tags:
  - statistics
  - R
  - 基本統計学
format: hugo
slug: basic-statistics-6
html-math-method: webtex
---

## prep

```{r}
pacman::p_load(tidyverse)
```


## (1)

二項分布の確率は`dbinom()`関数で生成できる。

```{r}
x <- seq(1:6)
df_1 <- tibble(
    x = x,
    y = dbinom(x, size = 6, prob = 0.25)
)
df_1 |>
    ggplot(aes(x, y)) +
    geom_point() +
    geom_line()

```

平均値と標準偏差を確率分布から求める。

標準偏差を求める関数を作っておく。

```{r}
glue::glue("mean is {sum(df_1$x * df_1$y)}")

val_mean <- sum(df_1$x * df_1$y)
val_var <- sum((df_1$x)^2 * df_1$y) - val_mean^2

glue::glue("variance is {val_var}")
```

　二項分布の平均値、分散がそれぞれ$np, npq$であることを利用した計算結果と一致する。

```{r}
glue::glue("np = {6 * 0.25}")
glue::glue("npq = {6 * 0.25 * 0.75}")
```

## (2)

nとpが与えられた時の二項分布の平均と分散を求める関数を作成してみる。

```{r}
calc_binomial <- function(n, p) {
    x = seq(1, n, 1)
    y = dbinom(x, n, p)
    val_mean = sum(x * y)
    val_var = sum(x * x * y) - val_mean ^ 2

    tibble(x = x, y = y) |>
    ggplot(aes(x, y)) +
    geom_line() +
    geom_point() +
    geom_segment(aes(x = val_mean, xend = val_mean,
    y = 0, yend = dbinom(val_mean, n, p))) +
    theme_bw() +
    ggtitle(glue::glue("n = {n}, p = {p}")) +
annotate("text",
    x = val_mean + 10, y = max(y),
    label = glue::glue("Mean = {val_mean}, Variance = {val_var}"))
}
```


```{r}
calc_binomial(50, 0.5)
calc_binomial(100, 0.2)
calc_binomial(400, 0.2)
calc_binomial(900, 1/3)
```

## (3)

正確な硬貨を8回投げた時の表の出る回数は二項分布に従う。

```{r}
calc_binomial(8, 0.5) +
xlim(c(0, 20))
```

## (4)

二項分布の式、とは以下である。

$$
P(x) = {}_nC_x\cdot p^x(1-p)^{n-x}
$$

### (a)

$$
\begin{eqnarray}

P &=& {}_6C_2\cdot \left( \frac{1}{6} \right)^2\left( \frac{5}{6} \right)^4 \\
&\simeq& 0.2009
\end{eqnarray}
$$

### (b)

「たかだか２回」が解釈不能なので飛ばす。

### (c)

$$
\begin{eqnarray}

P &=& {}_9C_2\cdot \left( \frac{1}{2} \right)^3\left( \frac{1}{2} \right)^6 \\
&\simeq& 0.3281
\end{eqnarray}
$$

### (d)

正確な硬貨を9回投げるとき、たかだか3回表が出る確率ってほんとなんなんだろう。3回以下なのか。

## 5)

```{r}
#| eval: false
#| echo: false
4 * 5 * 95 ^3 / 100^4
```

普通に二項分布として計算する。

たかだかは例によってよく分からないので飛ばす。

$$
\begin{eqnarray}

P &=& {}_4C_1\cdot \left( \frac{5}{100} \right)\left( \frac{95}{100} \right)^3 \\
&\simeq& 0.1715
\end{eqnarray}
$$

## 6)

たかだか問題によりパス。

## 7)

```{r}
1 - (( 3 / 4 ) ^ 10 + 10 * 3 ^ 9 / 4 ^ 10 + 45 * 3 ^ 8 / 4 ^ 10)
```

0, 1, 2回生じる確率を二項分布の式から計算し、余事象の確率を計算する。

0.4744

## 8)

不良が$\frac{102}{1000}$の確率で存在する二項分布を考える。

```{r}
(898 / 1000)^10
```

```{r}
10 * (102 / 1000) * (898 / 1000) ^ 9
```

```{r}
45 * (102 / 1000) ^ 2 * (898 / 1000) ^ 8
```

## 9)

### (a)

```{r}
prod(7:10) / prod(1:4) * 2 ^6 / 3 ^ 10
```

### (b)

```{r}
prod(c(8, 9, 10)) / prod(1:3) * 8 / 3 ^ 10 + 9 * 10 / 2 * 4 / 3 ^ 10 + 10 / 3 ^ 10
```

## 10)

```{r}
98 ^ 9 * 2 / 100 ^ 10
```

```{r}
9 * 8 / 2 * 98 ^ 7 * 2 ^ 3 / 100 ^ 10
```

## 11)

ポワソン分布の式は以下。

$$
P(x) = \frac{m ^ xe^{-m}}{x!}, m = np
$$

$$
n = 10, p = \frac{8}{400}
$$

の時の$P(0)$を求めれば良い。

```{r}
exp(-0.1)
```

これを二項分布で計算すると、

```{r}
(0.98) ^ 5
```

となり、おおよそ近い。

## 12)

超幾何分布で考える。今気づいたけど、`choose()`関数でコンビネーション計算できるみたい。

```{r}
choose(60, 2) * choose(30, 2) / choose(90, 4)
```

二項分布ならば以下。

```{r}
choose(4, 2) * (2 / 3) ^ 2 * (1 / 3) ^ 2
```

近からず遠からず。Nが少々少なかったか。

## 13)

```{r}
m = 100 * 0.02
x = 4
m ^ x * exp(-m) / factorial(x)
```

## 14)

```{r}
m = 200 * 0.03
x = 5
m ^ x * exp(-m) / factorial(x)
```

## 15)

動物園の入場者数は4人と比べたら相当多いはず。そのため、ポアソン分布が使えると考える。

ポワソン分布の期待値は$m$であり、それが4なのだから、確率の計算が可能。

期待値の性質を使うというアイデアは一瞬分からなかったけど、とても便利な性質だなあ。

```{r}
m = 4
x = c(1, 2, 5)
m ^ x * exp(-m) / factorial(x)
```

## 16)

```{r}
p = 1 / 10000
n = 20000
m = n * p

m
```

$$
\frac{2^xe^{-2}}{x!}
$$


## 17)

```{r}
n = 200
p = 0.02

4 ^ 2 * exp(-4) / factorial(2)
```

## 18)

```{r}
p = 0.012
n = 300

3.6 ^ 2 * exp(-3.6) / factorial(2)
```

## 19)

一冊の本で、一ページあたりの誤植数の期待値が0.05であるポアソン分布を考える。

```{r}
x = c(0, 1, 2)
0.05 ^ x * exp(-0.05) / factorial(x)
```

## 20)

```{r}

4 ^ 1 * exp(-4) / factorial(1)
```

例のごとく、たかだか問題は飛ばす。

## 21)

m = 5と指定されたポアソン分布。

### (a)

今更だけど、ポワソン分布の関数を作ろう。

```{r}
poisson_func <- function(m, x) {
    m ^ x * exp(-m) / factorial(x)
}
```

```{r}
poisson_func(5, 0)
```

### (b)

```{r}
poisson_func(5, 2)
```

### (c)

```{r}
poisson_func(5, 5)
```

## 22)

```{r}
1 - sum(poisson_func(4, c(0:5)))
```

```{r}
1 - sum(poisson_func(4, c(0:1)))
```

ところで、これは確率密度関数がプロットしたらイメージわきやすい気がした。

```{r}
library(tidyverse)

tibble(
    x = 1:20,
    p = poisson_func(4, 1:20)
) |>
    ggplot(aes(x = x, y = p)) +
    geom_point() +
    geom_line()
```

## 23)

### (a)

確率は単純にポワソン分布の式に代入すればよい。

```{r}
poisson_func(3, c(1:10))
```

平均値、すなわち期待値は確率に確率変数を乗算してから合計を計算すればよい。

```{r}
sum(poisson_func(3, 1:10) * 1:10)
```

確かに3に近い値となった。

多分手計算の都合で10までとしているのだが、とても大きい値まで計算するとどうか。

```{r}
sum(poisson_func(3, 1:100) * 1:100)
```

これ以上はオーバーフローしてしまうようだ。

### (b)

分散は二乗の期待値引く期待値の二乗で求める。

```{r}
sum(poisson_func(3, 1:10) * (1:10)^2) - sum(poisson_func(3, 1:10) * 1:10)^2
```

これも大体3に近い。

同じように大きい数字まで計算してみる。

```{r}
sum(poisson_func(3, 1:100) * (1:10)^2) - sum(poisson_func(3, 1:100) * 1:100)^2
```

うーん　これが計算の限界か。コンピュータ上だと桁数の多い小数が計算できないというのは本当だったのか。

## 24)

正規分布の確率密度関数でも、自作関数を作ってみよう。

```{r}
normal_function <- function(z) {
    exp(-z ^ 2 / 2) / sqrt(2 * pi)
}
```

一応プロットして確認する。

```{r}
tibble(
    x = -1000:1000*0.01,
    p = normal_function(-1000:1000*0.01)
    ) |>
    ggplot(aes(x = x, y = p)) +
    geom_point() +
    geom_line()
```

ちゃんと標準正規分布になっているようだ。いったんデータフレームにいれておく。

積分値が欲しいが、この積分値を求めるのは結構しんどい。マクローリン展開しないといけない?

と、調べてみるとRの標準関数でやる補法があるらしい。正規分布の密度(density)をintegral関数に与える。integral関数なんて・・・Rを五年以上やってて初めて聞いた・・・

### (a)

```{r}
integrate(dnorm, -1, 1)
```

わーほんとに求まったすごい。

### (b)...(f)

```{r}
calc_normal_sum <- function(z) {integrate(dnorm, -z, z)}
```

```{r}
c(2, 3, 1.96, 2.33, 2.58) |>
    map(\(x) calc_normal_sum(x))
```

## 25)

確率密度関数の積分値から確率を求める問題。

Rではqnorm()がそれを実現してくれる。

```{r}
qnorm(0.95, 0, 1)
```

ここで、0.95とは以下の部分の面積である。

```{r}
tibble(
    x = -1000:1000*0.01,
    p = normal_function(-1000:1000*0.01)
    ) -> df_norm

df_norm |>
    ggplot(aes(x = x, y = p)) +
    geom_line() +
    geom_area(
        data = df_norm |> filter(x < 1.644854),
        aes(x = x, y = p)
    )
```

この点に注意して計算する。

### (a)

```{r}
qnorm(0.45 + 0.5, 0, 1)
```

### (b)

```{r}
qnorm(0.96, 0, 1)
```

### (c)

```{r}
qnorm(0.07, 0, 1)
```

### (d)

```{r}
qnorm(0.65, 0, 1)
```

### (e)

```{r}
qnorm(0.03, 0, 1)
```

### (f)

```{r}
qnorm(0.3 + 0.5, 0, 1)
```


少しずつ書き進めます。